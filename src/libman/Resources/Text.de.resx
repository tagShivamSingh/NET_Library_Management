<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CacheCommandDesc" xml:space="preserve">
    <value>Inhalte des libman-Caches auflisten oder bereinigen</value>
  </data>
  <data name="CleanCommandDesc" xml:space="preserve">
    <value>Hiermit werden alle in der Datei "libman.json" definierten Bibliotheksdateien aus dem Projekt gelöscht.</value>
  </data>
  <data name="CleanCommandRemarks" xml:space="preserve">
    <value>Hiermit werden alle Ordner gelöscht, die nach diesem Vorgang leer sind.</value>
  </data>
  <data name="ConfigCommand_Description" xml:space="preserve">
    <value>Hiermit werden Konfigurationseinstellungen abgerufen oder festgelegt.</value>
  </data>
  <data name="ConfigCommand_Examples" xml:space="preserve">
    <value>    libman config http_proxy
    libman config --set http_proxy=http://beispiel
    libman config --setEncrypted http_proxy.password=kennwortText</value>
  </data>
  <data name="ConfigCommand_ArgumentDescription" xml:space="preserve">
    <value>Name der abzurufenden Einstellung</value>
  </data>
  <data name="ConfigCommand_Error_KeyNotFound" xml:space="preserve">
    <value>Schlüssel "{0}" nicht gefunden.</value>
  </data>
  <data name="DefaultDestinationOptionDesc" xml:space="preserve">
    <value>Der Pfad (relativ zum aktuellen Verzeichnis), in dem Bibliotheksdateien installiert werden sollen, wenn für eine Bibliothek kein Ziel definiert ist.</value>
  </data>
  <data name="DefaultProviderOptionDesc" xml:space="preserve">
    <value>Der zu verwendende Anbieter, wenn für eine Bibliothek kein Anbieter definiert wurde (z. B. "cdnjs", "filesystem")</value>
  </data>
  <data name="NonInteractiveConsoleMessage" xml:space="preserve">
    <value>In dieser Konsole ist keine Benutzereingabe möglich.</value>
  </data>
  <data name="DestinationOptionDesc" xml:space="preserve">
    <value>Speicherort zum Installieren der Bibliothek (sofern nicht angegeben, wird der Standardspeicherort verwendet)</value>
  </data>
  <data name="ExamplesHeader" xml:space="preserve">
    <value>Beispiele:</value>
  </data>
  <data name="FilesOptionDesc" xml:space="preserve">
    <value>Die Dateien aus der angegebenen Bibliothek, die installiert werden sollen (sofern nicht angegeben, werden alle Dateien aus der Bibliothek installiert)</value>
  </data>
  <data name="InitCommandDesc" xml:space="preserve">
    <value>Neue Datei "libman.json" erstellen</value>
  </data>
  <data name="InstallCommandDesc" xml:space="preserve">
    <value>Fügen Sie der Datei "libman.json" eine Bibliotheksdefinition hinzu, und laden Sie die Bibliothek an den angegebenen Speicherort herunter.</value>
  </data>
  <data name="InstallCommandExamples" xml:space="preserve">
    <value>libman install jquery@3.2.1
    libman install jquery --provider cdnjs --destination wwwroot\scripts\jquery --files jquery.min.js
    libman install myCalendar --provider filesystem --files calendar.js --files calendar.css</value>
  </data>
  <data name="InstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Bibliothek, die installiert werden soll</value>
  </data>
  <data name="InstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    CDNJS-Bibliotheken weisen folgendes Format für die Bibliotheks-ID auf: "&lt;Bibliotheksname&gt;@&lt;Bibliotheksversion&gt;"
    Wenn für CDNJS-Bibliotheken keine Version in der Bibliotheks-ID angegeben ist, wird die höchste verfügbare Version verwendet.</value>
  </data>
  <data name="InstallCommandRemarks" xml:space="preserve">
    <value>    Hiermit wird eine Datei "libman.json" initialisiert, wenn keine vorhanden ist.
    Wenn kein Standardanbieter vorhanden ist, muss die Option "--provider" angegeben werden.
    Wenn kein Standardziel vorhanden ist, muss die Option "--destination" angegeben werden.
    Wenn keine Dateien angegeben werden, wird die gesamte Bibliothek eingeschlossen.</value>
  </data>
  <data name="InvalidArgumentsMessage" xml:space="preserve">
    <value>Ungültige Argumente für Befehl: {0}</value>
  </data>
  <data name="LibmanCommandDesc" xml:space="preserve">
    <value>Bibliotheks-Manager</value>
  </data>
  <data name="ProviderOptionDesc" xml:space="preserve">
    <value>Der zu verwendende Anbieter (sofern nicht angegeben, wird der Standardanbieter verwendet)</value>
  </data>
  <data name="ProviderSpecificLogicHeader" xml:space="preserve">
    <value>Anbieterspezifische Logik:</value>
  </data>
  <data name="RemarksHeader" xml:space="preserve">
    <value>Hinweise:</value>
  </data>
  <data name="RestoreCommandDesc" xml:space="preserve">
    <value>Hiermit werden alle Dateien aus dem Anbieter heruntergeladen und am angegebenen Ziel gespeichert.</value>
  </data>
  <data name="RestoreCommandRemarks" xml:space="preserve">
    <value>Fehler, wenn keine Datei "libman.json" im aktuellen Ordner vorliegt.
    Wenn eine Bibliothek einen Anbieter angibt, überschreibt dieser den defaultProvider-Wert.
    Wenn eine Bibliothek ein Ziel angibt, überschreibt dieses den defaultDestination-Wert.</value>
  </data>
  <data name="UnInstallCommandDesc" xml:space="preserve">
    <value>Löscht alle Dateien für die angegebene Bibliothek aus den angegeben Zielen und entfernt anschließend die angegebene Bibliotheksdefinition aus "libman.json".</value>
  </data>
  <data name="UnInstallCommandExamples" xml:space="preserve">
    <value>    libman uninstall jquery
    libman uninstall jquery@3.3.1</value>
  </data>
  <data name="UninstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Bibliothek, die deinstalliert werden soll</value>
  </data>
  <data name="UninstallCommandProviderOptionDesc" xml:space="preserve">
    <value>Der Anbieter der Bibliothek, die deinstalliert werden soll</value>
  </data>
  <data name="UnInstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    CDNJS-Bibliotheken weisen folgendes Format für die Bibliotheks-ID auf: "&lt;Bibliotheksname&gt;@&lt;Bibliotheksversion&gt;"
    Wenn keine Version in der Bibliotheks-ID angegeben ist, wird dieser Befehl für alle Bibliotheken ausgeführt, deren Bibliotheksname der angegebenen Bibliotheks-ID entspricht.</value>
  </data>
  <data name="UnInstallCommandRemarks" xml:space="preserve">
    <value>Fehler, wenn keine Datei "libman.json" im aktuellen Ordner vorliegt.
    Fehler, wenn die angegebene Bibliothek nicht vorhanden ist.
    Falls mehr als eine Bibliothek mit derselben libraryId gefunden wird, werden Sie zur Auswahl aufgefordert.</value>
  </data>
  <data name="VerbosityOptionDesc" xml:space="preserve">
    <value>Ausführlichkeit der Ausgabe festlegen (z. B. "normal", "detailed", "quiet")</value>
  </data>
  <data name="ProjectPathOptionDesc" xml:space="preserve">
    <value>Pfad zum Projekt (standardmäßig wird das aktuelle Verzeichnis verwendet)</value>
  </data>
  <data name="DirectoryNotFoundMessage" xml:space="preserve">
    <value>Verzeichnis nicht gefunden: "{0}"</value>
  </data>
  <data name="FailedToRestoreLibraryMessage" xml:space="preserve">
    <value>Fehler beim Wiederherstellen von "{0}".</value>
  </data>
  <data name="FileDeleted" xml:space="preserve">
    <value>"{0}" gelöscht</value>
  </data>
  <data name="FileDeleteFail" xml:space="preserve">
    <value>Fehler beim Löschen von "{0}".</value>
  </data>
  <data name="FileWrittenToDisk" xml:space="preserve">
    <value>"{0}" wurde auf die Festplatte geschrieben.</value>
  </data>
  <data name="InitFailedLibmanJsonFileExists" xml:space="preserve">
    <value>Fehler bei der Initialisierung: Es ist bereits eine Datei "libman.json" vorhanden.</value>
  </data>
  <data name="CleanFailed" xml:space="preserve">
    <value>Fehler beim Bereinigen einiger Dateien.</value>
  </data>
  <data name="LibmanJsonNotFound" xml:space="preserve">
    <value>Die Datei "libman.json" wurde nicht gefunden: {0}</value>
  </data>
  <data name="DestinationRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>Das Standardziel ist nicht festgelegt. Geben Sie mithilfe von "--destination" ein Ziel an.</value>
  </data>
  <data name="LibraryIdRequiredForInstall" xml:space="preserve">
    <value>LibraryId für Installation erforderlich</value>
  </data>
  <data name="LibraryIdRequiredForUnInstall" xml:space="preserve">
    <value>Die LibraryId muss deinstalliert werden.</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstall" xml:space="preserve">
    <value>Mehr als eine Bibliothek mit der ID "{0}" gefunden.</value>
  </data>
  <data name="ProviderRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>Der Standardanbieter ist nicht festgelegt. Geben Sie mit "--provider" einen Anbieter an.</value>
  </data>
  <data name="UseProviderToDisambiguateMessage" xml:space="preserve">
    <value>Verwenden Sie "--provider", um gleichnamige Bibliotheken unterschiedlicher Anbieter im Projekt eindeutig zu kennzeichnen.</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstallForProvider" xml:space="preserve">
    <value>Für den Anbieter "{1}" wurde mehr als eine Bibliothek mit der ID "{0}" gefunden. Entfernen Sie die Bibliothek manuell aus der Datei "libman.json".</value>
  </data>
  <data name="NoLibraryToUninstall" xml:space="preserve">
    <value>Die Bibliothek "{0}" ist nicht installiert. Keine Elemente zur Installation vorhanden.</value>
  </data>
  <data name="CacheCleanCommandDesc" xml:space="preserve">
    <value>Hiermit werden alle Dateien aus dem LibMan-Cache des lokalen Computers gelöscht.</value>
  </data>
  <data name="CacheListCommandDesc" xml:space="preserve">
    <value>Hiermit wird eine Liste aller Bibliotheken angezeigt, die im LibMan-Cache des lokalen Computers gespeichert sind.</value>
  </data>
  <data name="CacheCleanProviderArgumentDesc" xml:space="preserve">
    <value>Anbieter, für den die Cachedateien bereinigt werden sollen.</value>
  </data>
  <data name="UpdateCommandDesc" xml:space="preserve">
    <value>Hiermit wird die angegebene Bibliothek aktualisiert.</value>
  </data>
  <data name="UpdateCommandExamples" xml:space="preserve">
    <value>    libman update jquery
    libman update jquery --to 3.3.1
    libman update jquery -pre
</value>
  </data>
  <data name="UpdateCommandRemarks" xml:space="preserve">
    <value>Fehler, wenn keine Datei "libman.json" im aktuellen Ordner vorliegt.
    Fehler, wenn die angegebene Bibliothek nicht vorhanden ist.
    Falls mehr als eine Bibliothek mit derselben libraryId gefunden wird, werden Sie zur Auswahl aufgefordert.</value>
  </data>
  <data name="UpdateCommandLibraryArgumentDesc" xml:space="preserve">
    <value>Name der Bibliothek, die aktualisiert werden soll (ohne Version).</value>
  </data>
  <data name="UpdateCommandPreReleaseOptionDesc" xml:space="preserve">
    <value>Sofern angegeben, wird die neueste Vorabversion der Bibliothek heruntergeladen (wo zutreffend)</value>
  </data>
  <data name="UpdateCommandProviderOptionDesc" xml:space="preserve">
    <value>Sofern angegeben, werden nur Bibliotheken des angegebenen Anbieters aktualisiert.</value>
  </data>
  <data name="CacheCleanedMessage" xml:space="preserve">
    <value>Cache bereinigt.</value>
  </data>
  <data name="CacheCleanFailed" xml:space="preserve">
    <value>Fehler beim Bereinigen des Caches: {0}</value>
  </data>
  <data name="CacheContentMessage" xml:space="preserve">
    <value>Inhalte des Caches:</value>
  </data>
  <data name="CacheEmptyMessage" xml:space="preserve">
    <value>(leer)</value>
  </data>
  <data name="CacheForProviderCleanedMessage" xml:space="preserve">
    <value>{0}-Cache bereinigt.</value>
  </data>
  <data name="CacheListFilesOptionDesc" xml:space="preserve">
    <value>Für jede Bibliothek zwischengespeicherte Dateien auflisten</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUpdate" xml:space="preserve">
    <value>Es wurde mehr als eine Bibliothek mit dem Namen "{0}" gefunden.</value>
  </data>
  <data name="NoLibrariesToUpdate" xml:space="preserve">
    <value>Keine Bibliotheken zur Aktualisierung vorhanden. Verwenden Sie den install-Befehl zum Installieren von Bibliotheken.</value>
  </data>
  <data name="NoLibraryFoundToUpdate" xml:space="preserve">
    <value>Es wurde keine Bibliothek mit dem Namen "{0}" für die Aktualisierung gefunden.
Geben Sie einen Bibliotheksnamen ohne Versionsinformationen für die Aktualisierung an.</value>
  </data>
  <data name="InstallLibraryFailed" xml:space="preserve">
    <value>Fehler beim Installieren der Bibliothek "{0}".</value>
  </data>
  <data name="CacheListLibrariesOptionDesc" xml:space="preserve">
    <value>Hiermit werden die für jeden Anbieter zwischengespeicherten Bibliotheken aufgelistet.</value>
  </data>
  <data name="ProviderNotInstalled" xml:space="preserve">
    <value>Der Anbieter "{0}" ist nicht installiert.</value>
  </data>
  <data name="SuggestedIdsMessage" xml:space="preserve">
    <value>Ähnliche Bibliotheken: </value>
  </data>
  <data name="FixManifestFile" xml:space="preserve">
    <value>Korrigieren Sie die Datei "libman.json", und wiederholen Sie den Vorgang.</value>
  </data>
  <data name="ChooseAnOption" xml:space="preserve">
    <value>Wählen Sie eine Option aus:</value>
  </data>
  <data name="LatestVersionAlreadyInstalled" xml:space="preserve">
    <value>Die Bibliothek "{0}" ist bereits auf dem neuesten Stand.</value>
  </data>
  <data name="InvalidToVersion" xml:space="preserve">
    <value>"{0}" ist kein gültiger Wert für "--to-version".</value>
  </data>
  <data name="UpdateCommandToVersionOptionDesc" xml:space="preserve">
    <value>Die Version, auf die die Bibliothek aktualisiert werden soll (erfordert die vollständige libraryid für den Anbieter)</value>
  </data>
  <data name="InstalledLibrary" xml:space="preserve">
    <value>Die Bibliothek "{0}" wurde in "{1}" installiert.</value>
  </data>
  <data name="UninstalledLibrary" xml:space="preserve">
    <value>Bibliothek "{0}" deinstalliert</value>
  </data>
  <data name="InvalidFilesForLibrary" xml:space="preserve">
    <value>In der Bibliothek "{0}" sind die folgenden Dateien nicht enthalten: {1}</value>
  </data>
  <data name="LibraryCannotBeInstalledDueToConflictingLibraries" xml:space="preserve">
    <value>Die Bibliothek "{0}" kann nicht installiert werden. "{1}" ist bereits in "{2}" installiert.
Geben Sie ein anderes Ziel an.</value>
  </data>
  <data name="LibraryIdRequiredForUpdate" xml:space="preserve">
    <value>LibraryId ist für Aktualisierung erforderlich.</value>
  </data>
  <data name="SpecifyDifferentDestination" xml:space="preserve">
    <value>Geben Sie ein anderes Ziel an.</value>
  </data>
  <data name="UninstallFailed" xml:space="preserve">
    <value>Fehler beim Deinstallierne von "{0}".</value>
  </data>
  <data name="UpdateLibraryFailed" xml:space="preserve">
    <value>Fehler beim Aktualisieren von "{0}" auf "{1}".</value>
  </data>
  <data name="UpdateLibraryToLatestFailed" xml:space="preserve">
    <value>Fehler beim Aktualisieren von "{0}" auf die neueste Version.</value>
  </data>
  <data name="LibraryUpdated" xml:space="preserve">
    <value>"{0}" auf "{1}" aktualisiert</value>
  </data>
  <data name="UnableToFindLatestVersionForLibrary" xml:space="preserve">
    <value>Die neueste Version für "{0}" konnte nicht bestimmt werden.</value>
  </data>
  <data name="InitFailedUnknownProvider" xml:space="preserve">
    <value>Fehler beim Initialisieren von "libman.json". [{0}]: {1}</value>
  </data>
  <data name="SpecifyDisabmiguatedLibrary" xml:space="preserve">
    <value>Bitte geben Sie die vollständige Bibliotheks-ID und den Anbieter mit der "--Provider"-Option an.</value>
  </data>
  <data name="SpecifyFieldUsingOption" xml:space="preserve">
    <value>Bitte geben Sie "{0}" mit der Option "--{1}" an.</value>
  </data>
  <data name="ConfigCommand_Error_ConflictingParameters" xml:space="preserve">
    <value>Einstellungen können nicht im selben Vorgang gelesen und geschrieben werden.</value>
  </data>
  <data name="ConfigCommand_OptionDescription_Set" xml:space="preserve">
    <value>Legt ein Schlüssel-Wert-Paar im Konfigurationsspeicher fest. Die Option muss das Format "Schlüssel=Wert" aufweisen.</value>
  </data>
  <data name="ConfigCommand_OptionDescription_SetEncrypted" xml:space="preserve">
    <value>Legt einen Schlüssel mit einem verschlüsselten Wert im Konfigurationsspeicher fest. Die Option muss das Format "Schlüssel=nurText" aufweisen.</value>
  </data>
  <data name="ConfigCommand_Remarks" xml:space="preserve">
    <value>    Einstellungen können nicht im selben Vorgang gelesen und gespeichert werden.
    Um eine Einstellung zu entfernen, legen Sie sie auf eine leere Zeichenfolge fest (--set key=).
    Das Abrufen entschlüsselter Werte für verschlüsselte Einstellungen wird nicht unterstützt.</value>
  </data>
  <data name="CacheLocationMessage" xml:space="preserve">
    <value>Stammverzeichnis für Cache:</value>
  </data>
  <data name="UseDefault" xml:space="preserve">
    <value>Standardeinstellungen für die Datei "libman.json" verwenden</value>
  </data>
</root>