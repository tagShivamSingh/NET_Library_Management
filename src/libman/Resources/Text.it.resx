<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CacheCommandDesc" xml:space="preserve">
    <value>Elenca o pulisce il contenuto della cache di libman</value>
  </data>
  <data name="CleanCommandDesc" xml:space="preserve">
    <value>Elimina dal progetto tutti i file di libreria definiti in libman.json</value>
  </data>
  <data name="CleanCommandRemarks" xml:space="preserve">
    <value>Elimina le eventuali cartelle che diventano vuote dopo questa operazione.</value>
  </data>
  <data name="ConfigCommand_Description" xml:space="preserve">
    <value>Ottiene o imposta le impostazioni di configurazione</value>
  </data>
  <data name="ConfigCommand_Examples" xml:space="preserve">
    <value>    libman config http_proxy
    libman config --set http_proxy=http://example
    libman config --setEncrypted http_proxy.password=passwordText</value>
  </data>
  <data name="ConfigCommand_ArgumentDescription" xml:space="preserve">
    <value>Nome dell'impostazione da recuperare</value>
  </data>
  <data name="ConfigCommand_Error_KeyNotFound" xml:space="preserve">
    <value>La chiave {0} non è stata trovata.</value>
  </data>
  <data name="DefaultDestinationOptionDesc" xml:space="preserve">
    <value>Percorso, relativo alla directory corrente, in cui devono essere installati i file di libreria se non è definita alcuna destinazione per una determinata libreria.</value>
  </data>
  <data name="DefaultProviderOptionDesc" xml:space="preserve">
    <value>Provider da usare se non è definito alcun provider per una determinata libreria, ad esempio "cdnjs", "filesystem"</value>
  </data>
  <data name="NonInteractiveConsoleMessage" xml:space="preserve">
    <value>Non è possibile richiedere l'input utente in questa console.</value>
  </data>
  <data name="DestinationOptionDesc" xml:space="preserve">
    <value>Percorso in cui installare la libreria. Se non viene specificato, verrà usato il percorso di destinazione predefinito</value>
  </data>
  <data name="ExamplesHeader" xml:space="preserve">
    <value>Esempi:</value>
  </data>
  <data name="FilesOptionDesc" xml:space="preserve">
    <value>File da installare dalla libreria specificata. Se non viene specificato, verranno installati tutti i file dalla libreria</value>
  </data>
  <data name="InitCommandDesc" xml:space="preserve">
    <value>Crea un nuovo file libman.json</value>
  </data>
  <data name="InstallCommandDesc" xml:space="preserve">
    <value>Aggiunge una definizione di libreria nel file LibMan.json e scarica la libreria nel percorso specificato</value>
  </data>
  <data name="InstallCommandExamples" xml:space="preserve">
    <value>libman install jquery@3.2.1
    libman install jquery --provider cdnjs --destination wwwroot\scripts\jquery --files jquery.min.js
    libman install myCalendar --provider filesystem --files calendar.js --files calendar.css</value>
  </data>
  <data name="InstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Libreria da installare</value>
  </data>
  <data name="InstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    Il formato dell'ID libreria delle librerie CDNJS è “&lt;nomeLibreria&gt;@&lt;versioneLibreria&gt;”
    Per le librerie CDNJS viene usata la versione massima disponibile se non viene specificata alcuna versione nell'ID libreria.</value>
  </data>
  <data name="InstallCommandRemarks" xml:space="preserve">
    <value>    Inizializza un file libman.json se non ne esiste uno
    Se non esiste alcun provider predefinito, è richiesta l'opzione --provider
    Se non esiste alcuna destinazione predefinita, è richiesta l'opzione --destination
    Se non si specifica alcun file, viene inclusa l'intera libreria</value>
  </data>
  <data name="InvalidArgumentsMessage" xml:space="preserve">
    <value>Argomenti non validi per il comando: {0}</value>
  </data>
  <data name="LibmanCommandDesc" xml:space="preserve">
    <value>Gestione librerie</value>
  </data>
  <data name="ProviderOptionDesc" xml:space="preserve">
    <value>Provider da usare. Se non viene specificato, verrà usato il provider predefinito</value>
  </data>
  <data name="ProviderSpecificLogicHeader" xml:space="preserve">
    <value>Logica specifica del provider:</value>
  </data>
  <data name="RemarksHeader" xml:space="preserve">
    <value>Commenti:</value>
  </data>
  <data name="RestoreCommandDesc" xml:space="preserve">
    <value>Scarica tutti i file dal provider e li salva nella destinazione specificata</value>
  </data>
  <data name="RestoreCommandRemarks" xml:space="preserve">
    <value>Errore se nella cartella corrente non è presente alcun file libman.json
    Se una libreria specifica un provider, eseguirà l'override di defaultProvider
    Se una libreria specifica una destinazione, eseguirà l'override di defaultDestination</value>
  </data>
  <data name="UnInstallCommandDesc" xml:space="preserve">
    <value>Elimina tutti i file della libreria specificata dalla destinazione specificata, quindi rimuove la definizione di libreria specificata da libman.json</value>
  </data>
  <data name="UnInstallCommandExamples" xml:space="preserve">
    <value>    libman uninstall jquery
    libman uninstall jquery@3.3.1</value>
  </data>
  <data name="UninstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Libreria da disinstallare</value>
  </data>
  <data name="UninstallCommandProviderOptionDesc" xml:space="preserve">
    <value>Provider della libreria da disinstallare</value>
  </data>
  <data name="UnInstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    Il formato dell'ID libreria delle librerie CDNJS è “&lt;nomeLibreria&gt;@&lt;versioneLibreria&gt;”
    Se non viene specificata alcuna versione nell'ID libreria, questo comando avrà effetto su qualsiasi libreria il cui nome libreria corrisponde all'ID libreria specificato</value>
  </data>
  <data name="UnInstallCommandRemarks" xml:space="preserve">
    <value>Errore se non esiste alcun file libman.json nella cartella corrente
    Errore se la libreria specificata non esiste
    Se esiste più di una libreria con lo stesso ID libreria, verrà chiesto di sceglierne una.</value>
  </data>
  <data name="VerbosityOptionDesc" xml:space="preserve">
    <value>Imposta il livello di dettaglio dell'output, ad esempio "normal", "detailed", "quiet"</value>
  </data>
  <data name="ProjectPathOptionDesc" xml:space="preserve">
    <value>Percorso del progetto (come percorso predefinito viene usata la directory corrente)</value>
  </data>
  <data name="DirectoryNotFoundMessage" xml:space="preserve">
    <value>Directory non trovata: {0}</value>
  </data>
  <data name="FailedToRestoreLibraryMessage" xml:space="preserve">
    <value>Non è stato possibile ripristinare "{0}"</value>
  </data>
  <data name="FileDeleted" xml:space="preserve">
    <value>{0} eliminato</value>
  </data>
  <data name="FileDeleteFail" xml:space="preserve">
    <value>Non è stato possibile eliminare {0}</value>
  </data>
  <data name="FileWrittenToDisk" xml:space="preserve">
    <value>{0} scritto su disco</value>
  </data>
  <data name="InitFailedLibmanJsonFileExists" xml:space="preserve">
    <value>Non è stato possibile eseguire l'inizializzazione: file 'libman.json' già esistente</value>
  </data>
  <data name="CleanFailed" xml:space="preserve">
    <value>Non è stato possibile pulire alcuni file.</value>
  </data>
  <data name="LibmanJsonNotFound" xml:space="preserve">
    <value>libman.json non è stato trovato: {0}</value>
  </data>
  <data name="DestinationRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>La destinazione predefinita non è impostata. Per specificare una destinazione, usare '--destination'</value>
  </data>
  <data name="LibraryIdRequiredForInstall" xml:space="preserve">
    <value>L'ID libreria è necessario per l'installazione</value>
  </data>
  <data name="LibraryIdRequiredForUnInstall" xml:space="preserve">
    <value>ID libreria necessario per la disinstallazione</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstall" xml:space="preserve">
    <value>È stata trovata più di una libreria con ID "{0}"</value>
  </data>
  <data name="ProviderRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>Il provider predefinito non è impostato. Per specificarne uno, usare '-provider'</value>
  </data>
  <data name="UseProviderToDisambiguateMessage" xml:space="preserve">
    <value>Usare --provider per disambiguare le librerie con lo stesso nome di provider diversi presenti nel progetto</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstallForProvider" xml:space="preserve">
    <value>È stata rilevata più di una libreria con ID "{0}" per il provider "{1}". Rimuovere manualmente il riferimento dal file libman.json</value>
  </data>
  <data name="NoLibraryToUninstall" xml:space="preserve">
    <value>La libreria "{0}" non è installata. Non è presente alcuna libreria da disinstallare</value>
  </data>
  <data name="CacheCleanCommandDesc" xml:space="preserve">
    <value>Elimina tutti i file dalla cache di LibMan del computer locale.</value>
  </data>
  <data name="CacheListCommandDesc" xml:space="preserve">
    <value>Visualizza un elenco di tutte le librerie che sono memorizzate nella cache di LibMan del computer locale.</value>
  </data>
  <data name="CacheCleanProviderArgumentDesc" xml:space="preserve">
    <value>Provider per il quale eliminare i file di cache.</value>
  </data>
  <data name="UpdateCommandDesc" xml:space="preserve">
    <value>Aggiorna la libreria specificata</value>
  </data>
  <data name="UpdateCommandExamples" xml:space="preserve">
    <value>    libman update jquery
    libman update jquery --to 3.3.1
    libman update jquery -pre
</value>
  </data>
  <data name="UpdateCommandRemarks" xml:space="preserve">
    <value>Errore se non esiste alcun file libman.json nella cartella corrente
    Errore se la libreria specificata non esiste
    Se esiste più di una libreria con lo stesso ID libreria, verrà chiesto di sceglierne una.</value>
  </data>
  <data name="UpdateCommandLibraryArgumentDesc" xml:space="preserve">
    <value>Nome della libreria da aggiornare (senza la versione).</value>
  </data>
  <data name="UpdateCommandPreReleaseOptionDesc" xml:space="preserve">
    <value>Se è specificata, verrà scaricata l'ultima versione preliminare della libreria (se applicabile)</value>
  </data>
  <data name="UpdateCommandProviderOptionDesc" xml:space="preserve">
    <value>Se è specificata, verranno aggiornate solo le librerie del provider specificato</value>
  </data>
  <data name="CacheCleanedMessage" xml:space="preserve">
    <value>Cache pulita.</value>
  </data>
  <data name="CacheCleanFailed" xml:space="preserve">
    <value>Non è stato possibile pulire la cache: {0}</value>
  </data>
  <data name="CacheContentMessage" xml:space="preserve">
    <value>Contenuto della cache:</value>
  </data>
  <data name="CacheEmptyMessage" xml:space="preserve">
    <value>(vuota)</value>
  </data>
  <data name="CacheForProviderCleanedMessage" xml:space="preserve">
    <value>Cache di {0} pulita.</value>
  </data>
  <data name="CacheListFilesOptionDesc" xml:space="preserve">
    <value>Elenca i file che sono memorizzati nella cache per ogni libreria</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUpdate" xml:space="preserve">
    <value>È stata trovata più di una libreria trovata con il nome "{0}"</value>
  </data>
  <data name="NoLibrariesToUpdate" xml:space="preserve">
    <value>Non ci sono librerie da aggiornare. Usare il comando install per installare le librerie</value>
  </data>
  <data name="NoLibraryFoundToUpdate" xml:space="preserve">
    <value>Non è stata trovata alcuna libreria denominata "{0}" da aggiornare.
Specificare un nome di libreria senza le informazioni di versione da aggiornare.</value>
  </data>
  <data name="InstallLibraryFailed" xml:space="preserve">
    <value>Non è stato possibile installare la libreria "{0}"</value>
  </data>
  <data name="CacheListLibrariesOptionDesc" xml:space="preserve">
    <value>Elenca le librerie memorizzate nella cache per ogni provider.</value>
  </data>
  <data name="ProviderNotInstalled" xml:space="preserve">
    <value>Il provider "{0}" non è installato</value>
  </data>
  <data name="SuggestedIdsMessage" xml:space="preserve">
    <value>Librerie simili: </value>
  </data>
  <data name="FixManifestFile" xml:space="preserve">
    <value>Correggere il file libman.json e riprovare</value>
  </data>
  <data name="ChooseAnOption" xml:space="preserve">
    <value>Selezionare un'opzione:</value>
  </data>
  <data name="LatestVersionAlreadyInstalled" xml:space="preserve">
    <value>La libreria "{0}" è già aggiornata</value>
  </data>
  <data name="InvalidToVersion" xml:space="preserve">
    <value>"{0}" non è un valore valido per --to-version</value>
  </data>
  <data name="UpdateCommandToVersionOptionDesc" xml:space="preserve">
    <value>Versione a cui aggiornare la libreria (è necessario l'ID libreria completo per il provider)</value>
  </data>
  <data name="InstalledLibrary" xml:space="preserve">
    <value>Libreria "{0}" installata in "{1}"</value>
  </data>
  <data name="UninstalledLibrary" xml:space="preserve">
    <value>Libreria "{0}" disinstallata</value>
  </data>
  <data name="InvalidFilesForLibrary" xml:space="preserve">
    <value>La libreria "{0}" non contiene i file seguenti: {1}</value>
  </data>
  <data name="LibraryCannotBeInstalledDueToConflictingLibraries" xml:space="preserve">
    <value>Non è possibile installare la libreria "{0}". "{1}" già presente in "{2}".
Specificare una destinazione diversa.</value>
  </data>
  <data name="LibraryIdRequiredForUpdate" xml:space="preserve">
    <value>L'ID libreria è necessario per l'aggiornamento</value>
  </data>
  <data name="SpecifyDifferentDestination" xml:space="preserve">
    <value>Specificare una destinazione diversa.</value>
  </data>
  <data name="UninstallFailed" xml:space="preserve">
    <value>Non è stato possibile disinstallare "{0}"</value>
  </data>
  <data name="UpdateLibraryFailed" xml:space="preserve">
    <value>Non è stato possibile aggiornare "{0}" a "{1}"</value>
  </data>
  <data name="UpdateLibraryToLatestFailed" xml:space="preserve">
    <value>Non è stato possibile aggiornare "{0}" alla versione più recente</value>
  </data>
  <data name="LibraryUpdated" xml:space="preserve">
    <value>"{0}" aggiornato a "{1}"</value>
  </data>
  <data name="UnableToFindLatestVersionForLibrary" xml:space="preserve">
    <value>Non è stato possibile determinare la versione più recente di "{0}"</value>
  </data>
  <data name="InitFailedUnknownProvider" xml:space="preserve">
    <value>Non è stato possibile inizializzare libman.json. [{0}]: {1}</value>
  </data>
  <data name="SpecifyDisabmiguatedLibrary" xml:space="preserve">
    <value>Specificare l'ID libreria completo, nonché il provider usando l'opzione '--provider'.</value>
  </data>
  <data name="SpecifyFieldUsingOption" xml:space="preserve">
    <value>Specificare '{0}' con l'opzione '--{1}'.</value>
  </data>
  <data name="ConfigCommand_Error_ConflictingParameters" xml:space="preserve">
    <value>Non è possibile leggere e scrivere impostazioni nella stessa operazione</value>
  </data>
  <data name="ConfigCommand_OptionDescription_Set" xml:space="preserve">
    <value>Imposta una coppia chiave-valore nell'archivio di configurazione. L'opzione deve essere specificata nel formato chiave=valore</value>
  </data>
  <data name="ConfigCommand_OptionDescription_SetEncrypted" xml:space="preserve">
    <value>Imposta una chiave con un valore crittografato nell'archivio di configurazione. L'opzione deve essere specificata nel formato chiave=testo non crittografato</value>
  </data>
  <data name="ConfigCommand_Remarks" xml:space="preserve">
    <value>    Non è possibile leggere e archiviare impostazioni nella stessa operazione.
    Per rimuovere un'impostazione, impostarla su una stringa vuota (--set key=).
    Il recupero dei valori decrittografati per le impostazioni crittografate non è supportato.</value>
  </data>
  <data name="CacheLocationMessage" xml:space="preserve">
    <value>Directory radice della cache:</value>
  </data>
  <data name="UseDefault" xml:space="preserve">
    <value>Usa le impostazioni predefinite per il file libman.json</value>
  </data>
</root>