<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CacheCommandDesc" xml:space="preserve">
    <value>Vytvoří seznam obsahu mezipaměti libman nebo ho vyčistí.</value>
  </data>
  <data name="CleanCommandDesc" xml:space="preserve">
    <value>Odstraní z projektu všechny soubory knihoven, které jsou definovány v libman.json.</value>
  </data>
  <data name="CleanCommandRemarks" xml:space="preserve">
    <value>Odstraní všechny složky, které se po provedení této operace vyprázdní.</value>
  </data>
  <data name="ConfigCommand_Description" xml:space="preserve">
    <value>Načte nebo nastaví nastavení konfigurace.</value>
  </data>
  <data name="ConfigCommand_Examples" xml:space="preserve">
    <value>    libman config http_proxy
    libman config --set http_proxy=http://example
    libman config --setEncrypted http_proxy.password=passwordText</value>
  </data>
  <data name="ConfigCommand_ArgumentDescription" xml:space="preserve">
    <value>Název nastavení, které se má načíst</value>
  </data>
  <data name="ConfigCommand_Error_KeyNotFound" xml:space="preserve">
    <value>Klíč {0} se nenašel.</value>
  </data>
  <data name="DefaultDestinationOptionDesc" xml:space="preserve">
    <value>Cesta, která je relativní k aktuálnímu adresáři a do které mají být nainstalovány soubory knihoven, pokud pro danou knihovnu není definován žádný cíl</value>
  </data>
  <data name="DefaultProviderOptionDesc" xml:space="preserve">
    <value>Poskytovatel, který se má použít, pokud pro danou knihovnu není definován žádný poskytovatel (např. cdnjs, filesystem)</value>
  </data>
  <data name="NonInteractiveConsoleMessage" xml:space="preserve">
    <value>V této konzole nejde vyzvat uživatele k zadání vstupu.</value>
  </data>
  <data name="DestinationOptionDesc" xml:space="preserve">
    <value>Umístění pro instalaci knihovny (Pokud není zadané, použije se výchozí cílové umístění.)</value>
  </data>
  <data name="ExamplesHeader" xml:space="preserve">
    <value>Příklady:</value>
  </data>
  <data name="FilesOptionDesc" xml:space="preserve">
    <value>Soubory ze zadané knihovny k instalaci (Pokud nejsou zadané, nainstalují se všechny soubory z knihovny.)</value>
  </data>
  <data name="InitCommandDesc" xml:space="preserve">
    <value>Vytvoří nový soubor libman.json.</value>
  </data>
  <data name="InstallCommandDesc" xml:space="preserve">
    <value>Přidá definici knihovny do souboru LibMan.json a stáhne knihovnu do zadaného umístění.</value>
  </data>
  <data name="InstallCommandExamples" xml:space="preserve">
    <value>libman install jquery@3.2.1
    libman install jquery --provider cdnjs --destination wwwroot\scripts\jquery --files jquery.min.js
    libman install myCalendar --provider filesystem --files calendar.js --files calendar.css</value>
  </data>
  <data name="InstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Knihovna k instalaci</value>
  </data>
  <data name="InstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    Knihovny CDNJS mají formát ID knihovny &lt;názevKnihovny&gt;@&lt;verzeKnihovny&gt;.
    Pokud se u knihoven CDNJS nezadá v ID knihovny žádná verze, použije se nejvyšší dostupná verze.</value>
  </data>
  <data name="InstallCommandRemarks" xml:space="preserve">
    <value>    Inicializuje libman.json, pokud neexistuje.
    Pokud neexistuje žádný výchozí poskytovatel, vyžaduje se možnost --provider.
    Pokud neexistuje žádný výchozí cíl, vyžaduje se možnost --destination.
    Pokud nejsou určeny žádné soubory, zahrne se celá knihovna.</value>
  </data>
  <data name="InvalidArgumentsMessage" xml:space="preserve">
    <value>Neplatné argumenty pro příkaz: {0}</value>
  </data>
  <data name="LibmanCommandDesc" xml:space="preserve">
    <value>Správce knihoven</value>
  </data>
  <data name="ProviderOptionDesc" xml:space="preserve">
    <value>Poskytovatel, který se má použít (Pokud není zadán, použije se výchozí poskytovatel.)</value>
  </data>
  <data name="ProviderSpecificLogicHeader" xml:space="preserve">
    <value>Logika specifická pro poskytovatele:</value>
  </data>
  <data name="RemarksHeader" xml:space="preserve">
    <value>Poznámky:</value>
  </data>
  <data name="RestoreCommandDesc" xml:space="preserve">
    <value>Stáhne všechny soubory od poskytovatele a uloží je do zadaného cíle.</value>
  </data>
  <data name="RestoreCommandRemarks" xml:space="preserve">
    <value>Chyba, pokud libman.json není v aktuální složce
Pokud knihovna určuje poskytovatele, přepíše položku defaultProvider.
Pokud knihovna určuje cíl, přepíše položku defaultDestination.</value>
  </data>
  <data name="UnInstallCommandDesc" xml:space="preserve">
    <value>Odstraní všechny soubory zadané knihovny ze zadaného cíle a pak odebere definici zadané knihovny ze souboru libman.json.</value>
  </data>
  <data name="UnInstallCommandExamples" xml:space="preserve">
    <value>    libman uninstall jquery
    libman uninstall jquery@3.3.1</value>
  </data>
  <data name="UninstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Knihovna k odinstalaci</value>
  </data>
  <data name="UninstallCommandProviderOptionDesc" xml:space="preserve">
    <value>Poskytovatel knihovny k odinstalaci</value>
  </data>
  <data name="UnInstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    Knihovny CDNJS mají formát ID knihovny &lt;názevKnihovny&gt;@&lt;verzeKnihovny&gt;.
    Pokud se u knihoven CDNJS nezadá v ID knihovny žádná verze, tento příkaz se provede pro všechny knihovny, jejichž názevKnihovny bude odpovídat danému ID knihovny.</value>
  </data>
  <data name="UnInstallCommandRemarks" xml:space="preserve">
    <value>Chyba, pokud libman.json není v aktuální složce
Chyba, pokud zadaná knihovna neexistuje
Pokud existuje více než jedna knihovna se stejným libraryId, zobrazí se výzva k jejímu výběru.</value>
  </data>
  <data name="VerbosityOptionDesc" xml:space="preserve">
    <value>Nastavte podrobnost výstupu (např. normální, podrobný, nerušit).</value>
  </data>
  <data name="ProjectPathOptionDesc" xml:space="preserve">
    <value>Cesta k projektu (aktuální adresář nastaven jako výchozí)</value>
  </data>
  <data name="DirectoryNotFoundMessage" xml:space="preserve">
    <value>Adresář {0} nebyl nalezen.</value>
  </data>
  <data name="FailedToRestoreLibraryMessage" xml:space="preserve">
    <value>Nepodařilo se obnovit {0}.</value>
  </data>
  <data name="FileDeleted" xml:space="preserve">
    <value>Soubor {0} se odstranil.</value>
  </data>
  <data name="FileDeleteFail" xml:space="preserve">
    <value>Soubor {0} nebylo možné smazat.</value>
  </data>
  <data name="FileWrittenToDisk" xml:space="preserve">
    <value>Soubor {0} byl uložen na disk.</value>
  </data>
  <data name="InitFailedLibmanJsonFileExists" xml:space="preserve">
    <value>Nešlo inicializovat: libman.json už existuje.</value>
  </data>
  <data name="CleanFailed" xml:space="preserve">
    <value>Nepodařilo se vyčistit některé soubory.</value>
  </data>
  <data name="LibmanJsonNotFound" xml:space="preserve">
    <value>Soubor libman.json nebyl nalezen: {0}</value>
  </data>
  <data name="DestinationRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>Není nastaven výchozí cíl. Zadejte ho prosím pomocí argumentu --destination.</value>
  </data>
  <data name="LibraryIdRequiredForInstall" xml:space="preserve">
    <value>Pro instalaci je nutná položka LibraryId.</value>
  </data>
  <data name="LibraryIdRequiredForUnInstall" xml:space="preserve">
    <value>Při odinstalaci se vyžaduje LibraryId.</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstall" xml:space="preserve">
    <value>Nalezena více než jedna knihovna s ID {0}</value>
  </data>
  <data name="ProviderRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>Výchozí poskytovatel není nastaven. Uveďte prosím poskytovatele pomocí argumentu --provider.</value>
  </data>
  <data name="UseProviderToDisambiguateMessage" xml:space="preserve">
    <value>Argument --provider slouží k odlišení knihoven se stejným názvem, ale od různých poskytovatelů v projektu.</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstallForProvider" xml:space="preserve">
    <value>Byla nalezena více než jedna knihovna s ID {0} pro poskytovatele {1}. Odeberte je prosím ručně ze souboru libman.json.</value>
  </data>
  <data name="NoLibraryToUninstall" xml:space="preserve">
    <value>Knihovna {0} není nainstalovaná. Není k dispozici nic k odinstalaci.</value>
  </data>
  <data name="CacheCleanCommandDesc" xml:space="preserve">
    <value>Odstraní všechny soubory z mezipaměti LibMan místního počítače.</value>
  </data>
  <data name="CacheListCommandDesc" xml:space="preserve">
    <value>Zobrazí seznam všech knihoven, které jsou uložené v mezipaměti LibMan místního počítače.</value>
  </data>
  <data name="CacheCleanProviderArgumentDesc" xml:space="preserve">
    <value>Poskytovatel, pro kterého mají být soubory mezipaměti vyčištěny</value>
  </data>
  <data name="UpdateCommandDesc" xml:space="preserve">
    <value>Aktualizuje zadanou knihovnu.</value>
  </data>
  <data name="UpdateCommandExamples" xml:space="preserve">
    <value>    libman update jquery
    libman update jquery --to 3.3.1
    libman update jquery -pre
</value>
  </data>
  <data name="UpdateCommandRemarks" xml:space="preserve">
    <value>Chyba, pokud libman.json není v aktuální složce
Chyba, pokud zadaná knihovna neexistuje
Pokud existuje více než jedna knihovna se stejným libraryId, zobrazí se výzva k jejímu výběru.</value>
  </data>
  <data name="UpdateCommandLibraryArgumentDesc" xml:space="preserve">
    <value>Název knihovny k aktualizaci (bez verze)</value>
  </data>
  <data name="UpdateCommandPreReleaseOptionDesc" xml:space="preserve">
    <value>Pokud je zadaná tato možnost, stáhne se nejnovější předběžná verze knihovny (v případě potřeby)</value>
  </data>
  <data name="UpdateCommandProviderOptionDesc" xml:space="preserve">
    <value>Pokud je zadaná tato možnost, aktualizují se jen knihovny od zadaného poskytovatele.</value>
  </data>
  <data name="CacheCleanedMessage" xml:space="preserve">
    <value>Mezipaměť se vyčistila.</value>
  </data>
  <data name="CacheCleanFailed" xml:space="preserve">
    <value>Nepodařilo se vyčistit mezipaměť: {0}</value>
  </data>
  <data name="CacheContentMessage" xml:space="preserve">
    <value>Obsah mezipaměti:</value>
  </data>
  <data name="CacheEmptyMessage" xml:space="preserve">
    <value>(prázdná)</value>
  </data>
  <data name="CacheForProviderCleanedMessage" xml:space="preserve">
    <value>Mezipaměť {0} se vyčistila.</value>
  </data>
  <data name="CacheListFilesOptionDesc" xml:space="preserve">
    <value>Vytvoří pro každou knihovnu seznam souborů, které jsou uložené v mezipaměti.</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUpdate" xml:space="preserve">
    <value>Byla nalezena více než jedna knihovna s názvem {0}.</value>
  </data>
  <data name="NoLibrariesToUpdate" xml:space="preserve">
    <value>Žádné knihovny k aktualizaci. Nainstalujte je prosím pomocí příkazu install.</value>
  </data>
  <data name="NoLibraryFoundToUpdate" xml:space="preserve">
    <value>Nenašla se žádná knihovna s názvem {0}, která by se měla aktualizovat.
Zadejte prosím název knihovny k aktualizaci bez údaje o verzi.</value>
  </data>
  <data name="InstallLibraryFailed" xml:space="preserve">
    <value>Nepodařilo se nainstalovat knihovnu {0}.</value>
  </data>
  <data name="CacheListLibrariesOptionDesc" xml:space="preserve">
    <value>Vytvoří pro každého poskytovatele seznam knihoven, které jsou uložené v mezipaměti.</value>
  </data>
  <data name="ProviderNotInstalled" xml:space="preserve">
    <value>Poskytovatel {0} není nainstalovaný.</value>
  </data>
  <data name="SuggestedIdsMessage" xml:space="preserve">
    <value>Podobné knihovny: </value>
  </data>
  <data name="FixManifestFile" xml:space="preserve">
    <value>Opravte prosím soubor libman.json a zkuste to znovu.</value>
  </data>
  <data name="ChooseAnOption" xml:space="preserve">
    <value>Vyberte možnost:</value>
  </data>
  <data name="LatestVersionAlreadyInstalled" xml:space="preserve">
    <value>Knihovna {0} už je aktualizovaná.</value>
  </data>
  <data name="InvalidToVersion" xml:space="preserve">
    <value>{0} není platná hodnota pro --to-version.</value>
  </data>
  <data name="UpdateCommandToVersionOptionDesc" xml:space="preserve">
    <value>Verze, na kterou se má knihovna aktualizovat (nutné zadat úplnou položku libraryid pro poskytovatele)</value>
  </data>
  <data name="InstalledLibrary" xml:space="preserve">
    <value>Nainstalovala se knihovna {0} do: {1}.</value>
  </data>
  <data name="UninstalledLibrary" xml:space="preserve">
    <value>Odinstalovala se knihovna {0}.</value>
  </data>
  <data name="InvalidFilesForLibrary" xml:space="preserve">
    <value>Knihovna {0} neobsahuje následující soubory: {1}</value>
  </data>
  <data name="LibraryCannotBeInstalledDueToConflictingLibraries" xml:space="preserve">
    <value>Knihovnu {0} nejde nainstalovat. V {2} už je nainstalovaná knihovna {1}.
Zadejte prosím jiný cíl.</value>
  </data>
  <data name="LibraryIdRequiredForUpdate" xml:space="preserve">
    <value>Při aktualizaci se vyžaduje LibraryId.</value>
  </data>
  <data name="SpecifyDifferentDestination" xml:space="preserve">
    <value>Zadejte prosím jiný cíl.</value>
  </data>
  <data name="UninstallFailed" xml:space="preserve">
    <value>Nepodařilo se odinstalovat: {0}.</value>
  </data>
  <data name="UpdateLibraryFailed" xml:space="preserve">
    <value>{0} – nepodařilo se aktualizovat na: {1}</value>
  </data>
  <data name="UpdateLibraryToLatestFailed" xml:space="preserve">
    <value>Položku {0} se nepodařilo aktualizovat na nejnovější verzi.</value>
  </data>
  <data name="LibraryUpdated" xml:space="preserve">
    <value>{0} – aktualizováno na: {1}</value>
  </data>
  <data name="UnableToFindLatestVersionForLibrary" xml:space="preserve">
    <value>Nešlo určit nejnovější verzi pro: {0}.</value>
  </data>
  <data name="InitFailedUnknownProvider" xml:space="preserve">
    <value>Libman.json se nepodařilo inicializovat. [{0}]: {1}</value>
  </data>
  <data name="SpecifyDisabmiguatedLibrary" xml:space="preserve">
    <value>Zadejte prosím úplné ID knihovny a také zprostředkovatele pomocí přepínače --provider.</value>
  </data>
  <data name="SpecifyFieldUsingOption" xml:space="preserve">
    <value>Zadejte prosím parametr {0} pomocí přepínače --{1}.</value>
  </data>
  <data name="ConfigCommand_Error_ConflictingParameters" xml:space="preserve">
    <value>Nastavení nelze číst a zapisovat ve stejné operaci.</value>
  </data>
  <data name="ConfigCommand_OptionDescription_Set" xml:space="preserve">
    <value>Nastaví do úložiště konfigurací pár klíč-hodnota. Tato možnost by měla být ve tvaru klíč=hodnota.</value>
  </data>
  <data name="ConfigCommand_OptionDescription_SetEncrypted" xml:space="preserve">
    <value>Nastaví do úložiště konfigurací klíč s šifrovanou hodnotou. Tato možnost by měla být ve tvaru klíč=prostý_text</value>
  </data>
  <data name="ConfigCommand_Remarks" xml:space="preserve">
    <value>    Nastavení nelze číst a ukládat ve stejné operaci.
    Pokud chcete nastavení odebrat, nastavte je na prázdný řetězec (--set key=).
    Načítání dešifrovaných hodnot pro šifrované nastavení se nepodporuje.</value>
  </data>
  <data name="CacheLocationMessage" xml:space="preserve">
    <value>Kořenový adresář mezipaměti:</value>
  </data>
  <data name="UseDefault" xml:space="preserve">
    <value>Použít výchozí nastavení pro soubor libman.json</value>
  </data>
</root>