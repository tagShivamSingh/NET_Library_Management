<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CacheCommandDesc" xml:space="preserve">
    <value>Wyświetl lub wyczyść zawartość pamięci podręcznej narzędzia libman</value>
  </data>
  <data name="CleanCommandDesc" xml:space="preserve">
    <value>Usuwa z projektu wszystkie pliki biblioteki zdefiniowane w pliku libman.json</value>
  </data>
  <data name="CleanCommandRemarks" xml:space="preserve">
    <value>Usuwa wszystkie foldery, które będą puste po tej operacji.</value>
  </data>
  <data name="ConfigCommand_Description" xml:space="preserve">
    <value>Pobiera lub ustawia ustawienia konfiguracji</value>
  </data>
  <data name="ConfigCommand_Examples" xml:space="preserve">
    <value>    libman config http_proxy
    libman config --set http_proxy=http://example
    libman config --setEncrypted http_proxy.password=passwordText</value>
  </data>
  <data name="ConfigCommand_ArgumentDescription" xml:space="preserve">
    <value>Nazwa ustawienia do pobrania</value>
  </data>
  <data name="ConfigCommand_Error_KeyNotFound" xml:space="preserve">
    <value>Nie znaleziono klucza {0}.</value>
  </data>
  <data name="DefaultDestinationOptionDesc" xml:space="preserve">
    <value>Ścieżka, względna wobec bieżącego katalogu, w której powinny zostać zainstalowane pliki biblioteki, jeśli dla danej biblioteki nie ma zdefiniowanej lokalizacji docelowej.</value>
  </data>
  <data name="DefaultProviderOptionDesc" xml:space="preserve">
    <value>Dostawca, który ma być używany, jeśli dla danej biblioteki nie ma zdefiniowanego dostawcy. (np. „cdnjs”, „filesystem”)</value>
  </data>
  <data name="NonInteractiveConsoleMessage" xml:space="preserve">
    <value>W tej konsoli nie można monitować o dane wejściowe użytkownika.</value>
  </data>
  <data name="DestinationOptionDesc" xml:space="preserve">
    <value>Lokalizacja, w której ma zostać zainstalowana biblioteka (jeśli nie będzie określona, zostanie użyta lokalizacja domyślna)</value>
  </data>
  <data name="ExamplesHeader" xml:space="preserve">
    <value>Przykłady:</value>
  </data>
  <data name="FilesOptionDesc" xml:space="preserve">
    <value>Pliki z określonej biblioteki do zainstalowania (jeśli nie będą określone, zostaną zainstalowane wszystkie pliki z biblioteki)</value>
  </data>
  <data name="InitCommandDesc" xml:space="preserve">
    <value>Utwórz nowy plik libman.json</value>
  </data>
  <data name="InstallCommandDesc" xml:space="preserve">
    <value>Dodaj definicję biblioteki do pliku LibMan.json i pobierz bibliotekę do określonej lokalizacji</value>
  </data>
  <data name="InstallCommandExamples" xml:space="preserve">
    <value>libman install jquery@3.2.1
    libman install jquery --provider cdnjs --destination wwwroot\scripts\jquery --files jquery.min.js
    libman install myCalendar --provider filesystem --files calendar.js --files calendar.css</value>
  </data>
  <data name="InstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Biblioteka do zainstalowania</value>
  </data>
  <data name="InstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    Biblioteki CDNJS mają identyfikator biblioteki w formacie „&lt;nazwaBiblioteki&gt;@&lt;wersjaBiblioteki&gt;”
    Jeśli w przypadku bibliotek CDNJS w identyfikatorze biblioteki nie zostanie określona wersja, zostanie użyta najwyższa dostępna wersja.</value>
  </data>
  <data name="InstallCommandRemarks" xml:space="preserve">
    <value>    Inicjuje plik libman.json, jeśli nie istnieje
    Jeśli nie istnieje domyślny dostawca, opcja --provider jest wymagana
    Jeśli nie istnieje domyślne miejsce docelowe, opcja --destination jest wymagana
    Jeśli nie są określone pliki, uwzględniana jest cała biblioteka</value>
  </data>
  <data name="InvalidArgumentsMessage" xml:space="preserve">
    <value>Nieprawidłowe argumenty dla polecenia: {0}</value>
  </data>
  <data name="LibmanCommandDesc" xml:space="preserve">
    <value>Menedżer biblioteki</value>
  </data>
  <data name="ProviderOptionDesc" xml:space="preserve">
    <value>Dostawca do użycia (jeśli nie będzie określony, zostanie użyty dostawca domyślny)</value>
  </data>
  <data name="ProviderSpecificLogicHeader" xml:space="preserve">
    <value>Logika specyficzna dla dostawcy:</value>
  </data>
  <data name="RemarksHeader" xml:space="preserve">
    <value>Uwagi:</value>
  </data>
  <data name="RestoreCommandDesc" xml:space="preserve">
    <value>Pobiera wszystkie pliki od dostawcy i zapisuje je w określonej lokalizacji docelowej</value>
  </data>
  <data name="RestoreCommandRemarks" xml:space="preserve">
    <value>Błąd, jeśli w bieżącym folderze nie ma pliku libman.json
    Jeśli biblioteka określa dostawcę, przesłoni on dostawcę domyślnego
    Jeśli biblioteka określa lokalizację docelową, przesłoni ona domyślną lokalizację docelową</value>
  </data>
  <data name="UnInstallCommandDesc" xml:space="preserve">
    <value>Usuwa wszystkie pliki określonej biblioteki z określonego miejsca docelowego, a następnie usuwa określoną definicję biblioteki z pliku libman.json</value>
  </data>
  <data name="UnInstallCommandExamples" xml:space="preserve">
    <value>    libman uninstall jquery
    libman uninstall jquery@3.3.1</value>
  </data>
  <data name="UninstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Biblioteka do odinstalowania</value>
  </data>
  <data name="UninstallCommandProviderOptionDesc" xml:space="preserve">
    <value>Dostawca biblioteki do odinstalowania</value>
  </data>
  <data name="UnInstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    Biblioteki CDNJS mają identyfikator biblioteki w formacie „&lt;nazwaBiblioteki&gt;@&lt;wersjaBiblioteki&gt;”
    Jeśli w identyfikatorze biblioteki nie zostanie określona wersja, to polecenie zostanie wykonane względem dowolnej biblioteki, której nazwa jest zgodna z identyfikatorem biblioteki</value>
  </data>
  <data name="UnInstallCommandRemarks" xml:space="preserve">
    <value>Błąd, jeśli w bieżącym folderze nie ma pliku libman.json
    Błąd, jeśli określona biblioteka nie istnieje
    Jeśli istnieje więcej niż jedna biblioteka z tym samym identyfikatorem biblioteki, zobaczysz monit o dokonanie wyboru.</value>
  </data>
  <data name="VerbosityOptionDesc" xml:space="preserve">
    <value>Ustaw poziom szczegółowości danych wyjściowych (np. „normalne”, „szczegółowe”, „dyskretne”)</value>
  </data>
  <data name="ProjectPathOptionDesc" xml:space="preserve">
    <value>Ścieżka do projektu (bieżący katalog jest używany jako wartość domyślna)</value>
  </data>
  <data name="DirectoryNotFoundMessage" xml:space="preserve">
    <value>Nie znaleziono katalogu {0}</value>
  </data>
  <data name="FailedToRestoreLibraryMessage" xml:space="preserve">
    <value>Nie można przywrócić elementu „{0}”</value>
  </data>
  <data name="FileDeleted" xml:space="preserve">
    <value>Plik {0} został usunięty</value>
  </data>
  <data name="FileDeleteFail" xml:space="preserve">
    <value>Nie można usunąć pliku {0}</value>
  </data>
  <data name="FileWrittenToDisk" xml:space="preserve">
    <value>Plik {0} został zapisany na dysku</value>
  </data>
  <data name="InitFailedLibmanJsonFileExists" xml:space="preserve">
    <value>Nie można zainicjować: plik „libman.json” już istnieje</value>
  </data>
  <data name="CleanFailed" xml:space="preserve">
    <value>Nie można wyczyścić niektórych plików.</value>
  </data>
  <data name="LibmanJsonNotFound" xml:space="preserve">
    <value>Nie znaleziono pliku libman.json: {0}</value>
  </data>
  <data name="DestinationRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>Nie ustawiono domyślnej lokalizacji docelowej. Podaj lokalizację docelową za pomocą opcji „--destination”</value>
  </data>
  <data name="LibraryIdRequiredForInstall" xml:space="preserve">
    <value>Do instalacji wymagany jest identyfikator biblioteki</value>
  </data>
  <data name="LibraryIdRequiredForUnInstall" xml:space="preserve">
    <value>Do odinstalowania wymagany jest identyfikator biblioteki</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstall" xml:space="preserve">
    <value>Znaleziono więcej niż jedną bibliotekę z identyfikatorem „{0}”</value>
  </data>
  <data name="ProviderRequiredWhenNoDefaultIsPresent" xml:space="preserve">
    <value>Nie ustawiono domyślnego dostawcy. Podaj dostawcę przy użyciu opcji „--provider”</value>
  </data>
  <data name="UseProviderToDisambiguateMessage" xml:space="preserve">
    <value>Użyj opcji --provider w celu rozróżnienia bibliotek o tej samej nazwie od różnych dostawców w projekcie</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUninstallForProvider" xml:space="preserve">
    <value>Znaleziono więcej niż jedną bibliotekę z identyfikatorem „{0}” dla dostawcy „{1}”. Usuń ją ręcznie z pliku libman.json</value>
  </data>
  <data name="NoLibraryToUninstall" xml:space="preserve">
    <value>Biblioteka „{0}” nie jest zainstalowana. Nie ma niczego do odinstalowania</value>
  </data>
  <data name="CacheCleanCommandDesc" xml:space="preserve">
    <value>Usuń wszystkie pliki z pamięci podręcznej narzędzia LibMan na maszynie lokalnej.</value>
  </data>
  <data name="CacheListCommandDesc" xml:space="preserve">
    <value>Wyświetl listę wszystkich bibliotek, które są przechowywane w pamięci podręcznej narzędzia LibMan na komputerze lokalnym.</value>
  </data>
  <data name="CacheCleanProviderArgumentDesc" xml:space="preserve">
    <value>Dostawca, dla którego powinny zostać wyczyszczone pliki pamięci podręcznej.</value>
  </data>
  <data name="UpdateCommandDesc" xml:space="preserve">
    <value>Aktualizuje określoną bibliotekę</value>
  </data>
  <data name="UpdateCommandExamples" xml:space="preserve">
    <value>    libman update jquery
    libman update jquery --to 3.3.1
    libman update jquery -pre
</value>
  </data>
  <data name="UpdateCommandRemarks" xml:space="preserve">
    <value>Błąd, jeśli w bieżącym folderze nie ma pliku libman.json
    Błąd, jeśli określona biblioteka nie istnieje
    Jeśli istnieje więcej niż jedna biblioteka z tym samym identyfikatorem biblioteki, zobaczysz monit o dokonanie wyboru.</value>
  </data>
  <data name="UpdateCommandLibraryArgumentDesc" xml:space="preserve">
    <value>Nazwa biblioteki do zaktualizowania (bez wersji).</value>
  </data>
  <data name="UpdateCommandPreReleaseOptionDesc" xml:space="preserve">
    <value>Jeśli opcja będzie określona, zostanie pobrana najnowsza wersja wstępna biblioteki (gdy ma to zastosowanie)</value>
  </data>
  <data name="UpdateCommandProviderOptionDesc" xml:space="preserve">
    <value>Jeśli opcja zostanie określona, zostaną zaktualizowane tylko biblioteki od określonego dostawcy</value>
  </data>
  <data name="CacheCleanedMessage" xml:space="preserve">
    <value>Pamięć podręczna została wyczyszczona.</value>
  </data>
  <data name="CacheCleanFailed" xml:space="preserve">
    <value>Nie można wyczyścić pamięci podręcznej: {0}</value>
  </data>
  <data name="CacheContentMessage" xml:space="preserve">
    <value>Zawartość pamięci podręcznej:</value>
  </data>
  <data name="CacheEmptyMessage" xml:space="preserve">
    <value>(puste)</value>
  </data>
  <data name="CacheForProviderCleanedMessage" xml:space="preserve">
    <value>Wyczyszczono pamięć podręczną {0}.</value>
  </data>
  <data name="CacheListFilesOptionDesc" xml:space="preserve">
    <value>Wyświetl listę plików, które są buforowane dla każdej biblioteki</value>
  </data>
  <data name="MoreThanOneLibraryFoundToUpdate" xml:space="preserve">
    <value>Znaleziono więcej niż jedną bibliotekę o nazwie „{0}”</value>
  </data>
  <data name="NoLibrariesToUpdate" xml:space="preserve">
    <value>Brak bibliotek do zaktualizowania. Użyj poleceń do instalacji, aby zainstalować biblioteki</value>
  </data>
  <data name="NoLibraryFoundToUpdate" xml:space="preserve">
    <value>Nie znaleziono biblioteki o nazwie „{0}” do aktualizacji.
Podaj nazwę biblioteki do aktualizacji bez informacji o wersji.</value>
  </data>
  <data name="InstallLibraryFailed" xml:space="preserve">
    <value>Nie można zainstalować biblioteki „{0}”</value>
  </data>
  <data name="CacheListLibrariesOptionDesc" xml:space="preserve">
    <value>Wyświetla listę bibliotek buforowanych dla każdego dostawcy.</value>
  </data>
  <data name="ProviderNotInstalled" xml:space="preserve">
    <value>Dostawca „{0}” nie jest zainstalowany</value>
  </data>
  <data name="SuggestedIdsMessage" xml:space="preserve">
    <value>Podobne biblioteki:</value>
  </data>
  <data name="FixManifestFile" xml:space="preserve">
    <value>Napraw plik libman.json i spróbuj ponownie</value>
  </data>
  <data name="ChooseAnOption" xml:space="preserve">
    <value>Wybierz opcję:</value>
  </data>
  <data name="LatestVersionAlreadyInstalled" xml:space="preserve">
    <value>Biblioteka „{0}” jest już aktualna</value>
  </data>
  <data name="InvalidToVersion" xml:space="preserve">
    <value>„{0}” nie jest prawidłową wartością dla opcji --to-version</value>
  </data>
  <data name="UpdateCommandToVersionOptionDesc" xml:space="preserve">
    <value>Wersja, do której ma zostać zaktualizowana biblioteka (potrzebny jest pełny identyfikator biblioteki dla dostawcy)</value>
  </data>
  <data name="InstalledLibrary" xml:space="preserve">
    <value>Zainstalowano bibliotekę „{0}” w „{1}”</value>
  </data>
  <data name="UninstalledLibrary" xml:space="preserve">
    <value>Odinstalowano bibliotekę „{0}”</value>
  </data>
  <data name="InvalidFilesForLibrary" xml:space="preserve">
    <value>Biblioteka „{0}” nie zawiera następujących plików: {1}</value>
  </data>
  <data name="LibraryCannotBeInstalledDueToConflictingLibraries" xml:space="preserve">
    <value>Nie można zainstalować biblioteki „{0}”. Biblioteka „{1}” jest już zainstalowana w lokalizacji „{2}”.
Określ inną lokalizację docelową.</value>
  </data>
  <data name="LibraryIdRequiredForUpdate" xml:space="preserve">
    <value>Do aktualizacji wymagany jest identyfikator biblioteki</value>
  </data>
  <data name="SpecifyDifferentDestination" xml:space="preserve">
    <value>Podaj inną lokalizację docelową.</value>
  </data>
  <data name="UninstallFailed" xml:space="preserve">
    <value>Nie można odinstalować elementu „{0}”</value>
  </data>
  <data name="UpdateLibraryFailed" xml:space="preserve">
    <value>Nie można zaktualizować elementu „{0}” do „{1}”</value>
  </data>
  <data name="UpdateLibraryToLatestFailed" xml:space="preserve">
    <value>Nie można zaktualizować elementu „{0}” do najnowszej wersji</value>
  </data>
  <data name="LibraryUpdated" xml:space="preserve">
    <value>Zaktualizowano element „{0}” do „{1}”</value>
  </data>
  <data name="UnableToFindLatestVersionForLibrary" xml:space="preserve">
    <value>Nie można określić najnowszej wersji dla „{0}”</value>
  </data>
  <data name="InitFailedUnknownProvider" xml:space="preserve">
    <value>Nie można zainicjować pliku libman.json. [{0}]: {1}</value>
  </data>
  <data name="SpecifyDisabmiguatedLibrary" xml:space="preserve">
    <value>Podaj pełny identyfikator biblioteki oraz, za pomocą opcji „--provider”, dostawcę.</value>
  </data>
  <data name="SpecifyFieldUsingOption" xml:space="preserve">
    <value>Określ wartość „{0}” za pomocą opcji „--{1}”.</value>
  </data>
  <data name="ConfigCommand_Error_ConflictingParameters" xml:space="preserve">
    <value>Nie można odczytać i zapisać ustawień w tej samej operacji</value>
  </data>
  <data name="ConfigCommand_OptionDescription_Set" xml:space="preserve">
    <value>Ustawia parę klucz-wartość w magazynie konfiguracji. Opcja powinna mieć postać klucz=wartość</value>
  </data>
  <data name="ConfigCommand_OptionDescription_SetEncrypted" xml:space="preserve">
    <value>Ustawia klucz z zaszyfrowaną wartością w magazynie konfiguracji. Opcja powinna mieć postać klucz=zwykły tekst</value>
  </data>
  <data name="ConfigCommand_Remarks" xml:space="preserve">
    <value>    Nie można odczytać i zapisać ustawień w tej samej operacji.
    Aby usunąć ustawienie, należy ustawić je na pusty ciąg (--set key=).
    Pobieranie odszyfrowanych wartości dla ustawień szyfrowanych nie jest obsługiwane.</value>
  </data>
  <data name="CacheLocationMessage" xml:space="preserve">
    <value>Katalog główny pamięci podręcznej:</value>
  </data>
  <data name="UseDefault" xml:space="preserve">
    <value>Użyj ustawień domyślnych dla pliku libman.json</value>
  </data>
</root>