<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorCouldNotDeleteLibrary" xml:space="preserve">
    <value>未能删除库 {0} 中的一个或多个文件</value>
  </data>
  <data name="ErrorCouldNotWriteFile" xml:space="preserve">
    <value>{0} 无法被写入磁盘。请确保文件名正确</value>
  </data>
  <data name="ErrorDestinationPathHasInvalidCharacter" xml:space="preserve">
    <value>"{0}" 目标文件路径具有无效字符</value>
  </data>
  <data name="ErrorLibraryIdIsUndefined" xml:space="preserve">
    <value>未定义库 ID</value>
  </data>
  <data name="ErrorManifestMalformed" xml:space="preserve">
    <value>库管理器清单包含语法错误。请修复 libman.json 中的错误，然后重试。</value>
  </data>
  <data name="ErrorNotSupportedVersion" xml:space="preserve">
    <value>此版本的库管理器不支持版本 "{0}"</value>
  </data>
  <data name="ErrorPathIsUndefined" xml:space="preserve">
    <value>未定义“目标”。</value>
  </data>
  <data name="ErrorPathOutsideWorkingDirectory" xml:space="preserve">
    <value>“目标”必须在工作目录内</value>
  </data>
  <data name="ErrorProviderIsUndefined" xml:space="preserve">
    <value>提供程序未定义</value>
  </data>
  <data name="ErrorProviderUnknown" xml:space="preserve">
    <value>找不到 "{0}" 提供程序</value>
  </data>
  <data name="ErrorUnableToDownloadResource" xml:space="preserve">
    <value>无法从 "{0}" 下载资源</value>
  </data>
  <data name="ErrorUnableToResolveFilePath" xml:space="preserve">
    <value>"{1}" 提供程序无法解析 "{0}" 文件路径</value>
  </data>
  <data name="ErrorUnableToResolveSource" xml:space="preserve">
    <value>"{0}" 库无法由 "{1}" 提供程序解析</value>
  </data>
  <data name="ErrorUnknownException" xml:space="preserve">
    <value>发生未知异常</value>
  </data>
  <data name="ErrorConflictingLibraries" xml:space="preserve">
    <value>在多个库中找到冲突的文件 "{0}": {1}</value>
  </data>
  <data name="ErrorLibraryAlreadyInstalled" xml:space="preserve">
    <value>"{0}" 库已由 "{1}" 提供程序安装</value>
  </data>
  <data name="ErrorLibraryCannotInstallDueToConflicts" xml:space="preserve">
    <value>文件 "{0}" 已由 {1} 安装。</value>
  </data>
  <data name="ErrorLibraryCannotUpdateDueToConflicts" xml:space="preserve">
    <value>无法将库 "{0}" 更新为 "{1}"。已安装了另一个库 "{1}"</value>
  </data>
  <data name="ErrorLibraryCannotUpdateDueToFileConflicts" xml:space="preserve">
    <value>无法将库 "{0}" 更新为 "{1}"。以下文件对 "{1}" 无效: {2}</value>
  </data>
  <data name="ErrorLibraryHasInvalidFiles" xml:space="preserve">
    <value>"{0}" 不包含以下内容: {1}
有效文件为 {2}</value>
  </data>
  <data name="ErrorUnknownError" xml:space="preserve">
    <value>发生未知错误</value>
  </data>
  <data name="ErrorDuplicateLibraries" xml:space="preserve">
    <value>无法还原。库存在多个定义: {0}</value>
  </data>
  <data name="ErrorFilePathIsEmpty" xml:space="preserve">
    <value>库“{0}”不能指定名称为空的文件</value>
  </data>
</root>