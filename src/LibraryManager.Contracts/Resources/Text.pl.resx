<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorCouldNotDeleteLibrary" xml:space="preserve">
    <value>Nie można usunąć co najmniej jednego pliku z biblioteki {0}</value>
  </data>
  <data name="ErrorCouldNotWriteFile" xml:space="preserve">
    <value>Nie można zapisać pliku {0} na dysku. Upewnij się, że nazwa pliku jest poprawna</value>
  </data>
  <data name="ErrorDestinationPathHasInvalidCharacter" xml:space="preserve">
    <value>Ścieżka pliku docelowego „{0}” zawiera nieprawidłowe znaki</value>
  </data>
  <data name="ErrorLibraryIdIsUndefined" xml:space="preserve">
    <value>Identyfikator biblioteki nie został zdefiniowany</value>
  </data>
  <data name="ErrorManifestMalformed" xml:space="preserve">
    <value>Manifest menedżera biblioteki zawiera błędy składniowe. Usuń te błędy w pliku libman.json, a następnie spróbuj ponownie.</value>
  </data>
  <data name="ErrorNotSupportedVersion" xml:space="preserve">
    <value>Wersja „{0}” nie jest obsługiwana przez tę wersję Menedżera biblioteki</value>
  </data>
  <data name="ErrorPathIsUndefined" xml:space="preserve">
    <value>„Miejsce docelowe” nie jest zdefiniowane.</value>
  </data>
  <data name="ErrorPathOutsideWorkingDirectory" xml:space="preserve">
    <value>„Miejsce docelowe” musi znajdować się wewnątrz katalogu roboczego</value>
  </data>
  <data name="ErrorProviderIsUndefined" xml:space="preserve">
    <value>Dostawca nie został zdefiniowany</value>
  </data>
  <data name="ErrorProviderUnknown" xml:space="preserve">
    <value>Nie można znaleźć dostawcy „{0}”</value>
  </data>
  <data name="ErrorUnableToDownloadResource" xml:space="preserve">
    <value>Nie można pobrać zasobu z: „{0}”</value>
  </data>
  <data name="ErrorUnableToResolveFilePath" xml:space="preserve">
    <value>Ścieżka do pliku „{0}” nie może zostać rozpoznana przez dostawcę „{1}”</value>
  </data>
  <data name="ErrorUnableToResolveSource" xml:space="preserve">
    <value>Biblioteka „{0}” nie może zostać rozpoznana przez dostawcę „{1}”</value>
  </data>
  <data name="ErrorUnknownException" xml:space="preserve">
    <value>Wystąpił nieznany wyjątek</value>
  </data>
  <data name="ErrorConflictingLibraries" xml:space="preserve">
    <value>Znaleziono plik powodujący konflikt „{0}” w więcej niż jednej bibliotece: {1}</value>
  </data>
  <data name="ErrorLibraryAlreadyInstalled" xml:space="preserve">
    <value>Biblioteka „{0}” została już zainstalowana przez dostawcę „{1}”</value>
  </data>
  <data name="ErrorLibraryCannotInstallDueToConflicts" xml:space="preserve">
    <value>Plik „{0}” został już zainstalowany przez: {1}.</value>
  </data>
  <data name="ErrorLibraryCannotUpdateDueToConflicts" xml:space="preserve">
    <value>Nie można zaktualizować biblioteki „{0}” do wersji „{1}”. Jest już zainstalowana inna biblioteka „{1}”</value>
  </data>
  <data name="ErrorLibraryCannotUpdateDueToFileConflicts" xml:space="preserve">
    <value>Nie można zaktualizować biblioteki „{0}” do wersji „{1}”. Następujące pliki nie są prawidłowe dla wersji „{1}”: {2}</value>
  </data>
  <data name="ErrorLibraryHasInvalidFiles" xml:space="preserve">
    <value>Element „{0}” nie zawiera następujących plików: {1}
Prawidłowe pliki to {2}</value>
  </data>
  <data name="ErrorUnknownError" xml:space="preserve">
    <value>Wystąpił nieznany błąd</value>
  </data>
  <data name="ErrorDuplicateLibraries" xml:space="preserve">
    <value>Nie można przywrócić. Istnieje wiele definicji dla bibliotek: {0}</value>
  </data>
  <data name="ErrorFilePathIsEmpty" xml:space="preserve">
    <value>Biblioteka „{0}” nie może określać pliku z pustą nazwą</value>
  </data>
</root>